{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMIkbWtrZuf2d4zygv+F9eS",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Lori-Qi/AML-with-ML-DL/blob/main/FeatureSelector.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GG176xWa9X8_"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import scipy.cluster.hierarchy as sch\n",
        "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
        "\n",
        "class FeatureSelector:\n",
        "    \"\"\"\n",
        "    parameters:\n",
        "    df: pd.DataFrame\n",
        "        Dataframe containing the selected features\n",
        "    y: array-like or pd.Series\n",
        "        The traget variable which used to compute the correlation between the features and the target\n",
        "    \"\"\"\n",
        "\n",
        "    def __init__(self, df, y):\n",
        "        self.df = df.copy()\n",
        "        self.y = np.array(y)\n",
        "\n",
        "    # correlation distance matrix between the features, d = 1 - abs(corr)\n",
        "    def compute_distance_matrix(self):\n",
        "        corr = self.df.corr().abs()\n",
        "        dist = 1 - corr\n",
        "        return dist\n",
        "\n",
        "    # implementing hierarchical clustering using complete linkage to classify the features into many clusters\n",
        "    def hierarchical_clustering(self, dist_matrix, threshold=0.8):\n",
        "        \"\"\"\n",
        "        Parameters:\n",
        "        dist_matrix : pd.DataFrame\n",
        "            The distance matrix between features\n",
        "        threshold : float, optional\n",
        "            The correlation threshold (between 0 and 1). Features with correlation higher than this threshold\n",
        "            are considered highly correlated. In clustering, the cut-off distance is (1 - threshold)\n",
        "\n",
        "        Returns:\n",
        "        cluster_dict : dict\n",
        "            A dictionary of clusters in the format {cluster_id: [feature1, feature2, ...]}\n",
        "        \"\"\"\n",
        "        condensed_dist = sch.distance.squareform(dist_matrix.values)\n",
        "        linkage_matrix = sch.linkage(condensed_dist, method='complete')\n",
        "        clusters = sch.fcluster(linkage_matrix, t=(1 - threshold), criterion='distance')\n",
        "        cluster_dict = {}\n",
        "        features = dist_matrix.columns\n",
        "        for feature, c_id in zip(features, clusters):\n",
        "            cluster_dict.setdefault(c_id, []).append(feature)\n",
        "        return cluster_dict\n",
        "\n",
        "    #  calculate the VIF for each feature in the given DataFrame\n",
        "    def claculate_vif(self, df):\n",
        "        \"\"\"\n",
        "        Parameters:\n",
        "        df : pd.DataFrame\n",
        "            The subset of features for which to calculate VIF\n",
        "\n",
        "        Returns:\n",
        "        vif_df : pd.DataFrame\n",
        "            A DataFrame containing each feature and its corresponding VIF value\n",
        "        \"\"\"\n",
        "        X = df.values\n",
        "        vif_data = []\n",
        "        for i in range(X.shape[1]):\n",
        "            vif = variance_inflation_factor(X, i)\n",
        "            vif_data.append(vif)\n",
        "        vif_df = pd.DataFrame({'feature': df.columns, 'vif': vif_data})\n",
        "        return vif_df\n",
        "\n",
        "        # recursively remove features with VIF higher than the specified threshold until all features have VIF\n",
        "        # below the threshold or only one feature remains.\n",
        "        def_remove_high_vif_features(self, df, vif_threshold = 10.0):\n",
        "            \"\"\"\n",
        "            Parameters:\n",
        "            df : pd.DataFrame\n",
        "                The subset of features to be checked for VIF\n",
        "            vif_threshold : float, optional\n",
        "                The VIF threshold (default value is 10.0)\n",
        "\n",
        "            Returns:\n",
        "            df_reduced : pd.DataFrame\n",
        "                The DataFrame after removing high-VIF features\n",
        "            \"\"\"\n",
        "            while True:\n",
        "                if df.empty or df.shape[1] <= 1:\n",
        "                    break  # exit if DataFrame is empty or only one column remains.\n",
        "                vif_df = self.calculate_vif(df)\n",
        "                max_vif = vif_df['vif'].max()\n",
        "                if max_vif >= vif_threshold and df.shape[1] > 1:\n",
        "                    drop_feat = vif_df.loc[vif_df['vif'].idxmax(), 'feature']\n",
        "                    df = df.drop(columns=[drop_feat])\n",
        "                else:\n",
        "                    break\n",
        "            return df\n",
        "\n",
        "        # select the most representative feature from a cluster of features\n",
        "        # the score is computed as: score = alpha * Var(feature) + (1 - alpha) * |corr(feature, y)|\n",
        "        def selecte_representative_feature(self, df_cluster, alpha = 0.3):\n",
        "            \"\"\"\n",
        "            Parameters:\n",
        "            df_cluster : pd.DataFrame\n",
        "                The subset of features in a cluster\n",
        "            alpha : float, optional\n",
        "                The weight for the variance term. Default is 0.3\n",
        "\n",
        "            Returns:\n",
        "            best_feat : str\n",
        "                The name of the selected representative feature\n",
        "            \"\"\"\n",
        "            if df_cluster.shape[1] == 1:\n",
        "                return df_cluster.columns[0]\n",
        "\n",
        "            var_series = df_cluster.var()\n",
        "            corr_with_y = {}\n",
        "            for col in df_cluster.columns:\n",
        "                corr_with_y[col] = abs(np.corrcoef(df_cluster[col].values, self.y)[0, 1])\n",
        "\n",
        "            best_feat = None\n",
        "            best_score = -1\n",
        "            for col in df_cluster.columns:\n",
        "                score = alpha * var_series[col] + (1 - alpha) * corr_with_y[col]\n",
        "                if score > best_score:\n",
        "                    best_score = score\n",
        "                    best_feat = col\n",
        "            return best_feat\n",
        "\n",
        "        # combine hierarchical clustering, VIF checking, and representative feature selection\n",
        "        # to obtain a set of representative features.\n",
        "\n",
        "        def improved_hier_cluster_feature_selection(self, corr_threshold=0.9, vif_threshold=10.0, alpha=0.5):\n",
        "            \"\"\"\n",
        "            Parameters:\n",
        "            corr_threshold : float, optional\n",
        "            The correlation threshold used in hierarchical clustering (default 0.9)\n",
        "            vif_threshold : float, optional\n",
        "                The VIF threshold for feature removal (default 10.0)\n",
        "            alpha : float, optional\n",
        "                The weight for variance in the scoring function (default 0.5)\n",
        "\n",
        "            Returns:\n",
        "            representative_features : list\n",
        "                A list of the names of the selected representative features\n",
        "            \"\"\"\n",
        "\n",
        "            dist_matrix = self.compute_distance_matrix()\n",
        "            cluster_dict = self.hierarchical_clustering(dist_matrix, threshold=corr_threshold)\n",
        "            representative_features = []\n",
        "            for c_id, feature_list in cluster_dict.items():\n",
        "                df_subset = self.df[feature_list].copy()\n",
        "                df_subset_vif_checked = self.remove_high_vif_features(df_subset, vif_threshold=vif_threshold)\n",
        "                best_feat = self.select_representative_feature(df_subset_vif_checked, alpha=alpha)\n",
        "                representative_features.append(best_feat)\n",
        "            return representative_features\n"
      ]
    }
  ]
}